//Binary Search Implementation
//Time Complexity-O(logn)
//Space complexity-O(1)

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int s=0;
        int e=nums.size()-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(nums[mid]==target){
                return mid;
            }
            else if(nums[mid]<target){
                s=mid+1;
            }
            else {
                e=mid-1;
            }
         
        }
        return -1;

    }
};

//Selection sort
Time cmplexity-O(n^2)
Space Complexity-O(1)

class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        int n=nums.size();
        for(int i=0;i<n;i++){
            int minidx=i;
            for(int j=i+1;j<n;j++){
                if(nums[j]<nums[minidx]){
                    minidx=j;
                }
            }
            swap(nums[i],nums[minidx]);
        }
        return nums;
        
    }
};

